<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <OutputType>Library</OutputType>
    <TargetFramework>netstandard2.1</TargetFramework>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <Nullable>enable</Nullable>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="FParsec" Version="1.1.1" />
    <PackageReference Include="FSharp.Core" Version="4.7.2" />
  </ItemGroup>

  <PropertyGroup>
    <!-- Cannot set PackageId via build.cake due to error "Ambiguous project name 'FParsec.CSharp'". -->
    <PackageId>FParsec.CSharp</PackageId>
  </PropertyGroup>
  
  <ItemGroup>
    <!-- Setting "PrivateAssets" is only needed because of the workaround described below. -->
    <ProjectReference Include="..\FParsec.CSharp.LambdaConvert\FParsec.CSharp.LambdaConvert.fsproj" PrivateAssets="All" />
  </ItemGroup>

  <!-- Start of workaround -->
  <!--  
    The following solves the problem that 'dotnet pack' does not include the DLLs from referenced projects.
    See https://github.com/NuGet/Home/issues/3891 for a description of the problem
    and for newer versions / workarounds / built-in methods.
  -->
  <PropertyGroup>
    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);CopyProjectReferencesToPackage</TargetsForTfmSpecificBuildOutput>
    <!-- include PDBs in the NuGet package -->
    <AllowedOutputExtensionsInPackageBuildOutputFolder>$(AllowedOutputExtensionsInPackageBuildOutputFolder);.pdb</AllowedOutputExtensionsInPackageBuildOutputFolder>
  </PropertyGroup>
  <Target Name="CopyProjectReferencesToPackage" DependsOnTargets="ResolveReferences">
    <ItemGroup>
      <BuildOutputInPackage Include="@(ReferenceCopyLocalPaths-&gt;WithMetadataValue('ReferenceSourceTarget', 'ProjectReference'))" />
    </ItemGroup>
  </Target>
  <!-- End of workaround -->

</Project>
